# Task ID: 3
# Title: Implement Retrieve Itineraries API Endpoint
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create a REST API endpoint to retrieve and filter itinerary versions by location, date, and name
# Details:
Implement a GET endpoint at '/api/itineraries' that:
1. Accepts query parameters for location, date, and name
2. Returns a list of matching itineraries
3. Supports pagination for large result sets
4. Sorts results by date (descending) by default

Example implementation:
```javascript
app.get('/api/itineraries', async (req, res) => {
  try {
    const { location, date, name, page = 1, limit = 20 } = req.query;
    const query = {};
    
    // Build query based on provided filters
    if (location) query.location = { $regex: location, $options: 'i' };
    if (date) query.date = new Date(date);
    if (name) query.name = { $regex: name, $options: 'i' };
    
    // Execute query with pagination
    const skip = (page - 1) * limit;
    const itineraries = await Itinerary
      .find(query)
      .sort({ date: -1 })
      .skip(skip)
      .limit(parseInt(limit))
      .select('-jsonVersion'); // Exclude large JSON data in list view
    
    // Get total count for pagination
    const total = await Itinerary.countDocuments(query);
    
    return res.status(200).json({
      itineraries,
      pagination: {
        total,
        page: parseInt(page),
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
});

# Test Strategy:
1. Integration test with various filter combinations
2. Verify pagination works correctly
3. Test with non-existent filters returns empty array
4. Verify sorting order is correct
5. Test performance with large datasets
6. Verify response time is under 2 seconds
