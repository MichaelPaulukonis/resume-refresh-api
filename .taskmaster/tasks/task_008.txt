# Task ID: 8
# Title: Implement Retrieve Itinerary UI Functionality
# Status: pending
# Dependencies: 4, 7
# Priority: high
# Description: Create UI functionality to retrieve and display a selected itinerary from history
# Details:
Implement JavaScript functionality to:
1. Retrieve a selected itinerary by ID
2. Load the itinerary data into the current view
3. Display success/error messages

Example JavaScript:
```javascript
async function retrieveItinerary(id) {
  try {
    // Show loading indicator
    const loadingIndicator = document.createElement('div');
    loadingIndicator.id = 'loadingIndicator';
    loadingIndicator.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
    document.body.appendChild(loadingIndicator);
    
    // Fetch itinerary data
    const response = await fetch(`/api/itineraries/${id}`);
    const itinerary = await response.json();
    
    if (!response.ok) {
      throw new Error(itinerary.error || 'Failed to retrieve itinerary');
    }
    
    // Load itinerary data into current view
    document.getElementById('itineraryOutput').innerText = itinerary.humanReadable;
    
    // Store JSON data for later use
    window.currentItineraryData = itinerary.jsonVersion;
    
    // Pre-fill save form with itinerary details
    document.getElementById('location').value = itinerary.location;
    document.getElementById('date').value = new Date(itinerary.date).toISOString().split('T')[0];
    document.getElementById('name').value = itinerary.name || '';
    
    // Show success message
    const alertElement = document.createElement('div');
    alertElement.className = 'alert alert-success alert-dismissible fade show';
    alertElement.innerHTML = `
      Itinerary loaded successfully!
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.itinerary-container').prepend(alertElement);
    
    // Scroll to itinerary output
    document.getElementById('itineraryOutput').scrollIntoView({ behavior: 'smooth' });
    
    // Remove alert after 5 seconds
    setTimeout(() => {
      alertElement.remove();
    }, 5000);
  } catch (error) {
    console.error('Error retrieving itinerary:', error);
    
    // Show error message
    const alertElement = document.createElement('div');
    alertElement.className = 'alert alert-danger alert-dismissible fade show';
    alertElement.innerHTML = `
      Error: ${error.message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.itinerary-container').prepend(alertElement);
  } finally {
    // Remove loading indicator
    document.getElementById('loadingIndicator')?.remove();
  }
}

# Test Strategy:
1. Manual testing of retrieval functionality
2. Verify itinerary data is correctly loaded into the view
3. Test error handling with invalid or non-existent IDs
4. Verify loading indicators work correctly
5. Test with various itinerary data sizes
6. Verify response time is under 2 seconds
