# Task ID: 9
# Title: Implement Delete Itinerary UI Functionality
# Status: pending
# Dependencies: 5, 7
# Priority: medium
# Description: Create UI functionality to delete a selected itinerary with confirmation dialog
# Details:
Implement JavaScript functionality to:
1. Show a confirmation dialog before deletion
2. Delete the selected itinerary if confirmed
3. Update the itinerary list after deletion
4. Display success/error messages

Example JavaScript:
```javascript
function confirmDeleteItinerary(id) {
  // Create modal for confirmation
  const modal = document.createElement('div');
  modal.className = 'modal fade';
  modal.id = 'deleteConfirmModal';
  modal.setAttribute('tabindex', '-1');
  modal.innerHTML = `
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Confirm Deletion</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete this itinerary? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
        </div>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // Initialize Bootstrap modal
  const modalInstance = new bootstrap.Modal(modal);
  modalInstance.show();
  
  // Handle delete confirmation
  document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
    try {
      modalInstance.hide();
      
      // Show loading indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.id = 'deleteLoadingIndicator';
      loadingIndicator.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Deleting...</span></div>';
      document.body.appendChild(loadingIndicator);
      
      // Delete itinerary
      const response = await fetch(`/api/itineraries/${id}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.error || 'Failed to delete itinerary');
      }
      
      // Show success message
      const alertElement = document.createElement('div');
      alertElement.className = 'alert alert-success alert-dismissible fade show';
      alertElement.innerHTML = `
        Itinerary deleted successfully!
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.querySelector('.itinerary-history').prepend(alertElement);
      
      // Reload itineraries list
      loadItineraries();
      
      // Remove alert after 5 seconds
      setTimeout(() => {
        alertElement.remove();
      }, 5000);
    } catch (error) {
      console.error('Error deleting itinerary:', error);
      
      // Show error message
      const alertElement = document.createElement('div');
      alertElement.className = 'alert alert-danger alert-dismissible fade show';
      alertElement.innerHTML = `
        Error: ${error.message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.querySelector('.itinerary-history').prepend(alertElement);
    } finally {
      // Remove loading indicator
      document.getElementById('deleteLoadingIndicator')?.remove();
      
      // Remove modal from DOM after hiding
      modal.addEventListener('hidden.bs.modal', () => {
        modal.remove();
      });
    }
  });
  
  // Remove modal from DOM when closed
  modal.addEventListener('hidden.bs.modal', () => {
    modal.remove();
  });
}

# Test Strategy:
1. Manual testing of delete confirmation dialog
2. Verify cancellation works correctly
3. Test successful deletion updates the list
4. Test error handling with invalid or non-existent IDs
5. Verify loading indicators work correctly
6. Test with various user roles to ensure only Travel Coordinators can delete
